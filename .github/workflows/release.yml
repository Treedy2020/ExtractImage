name: Windows Release

permissions:
  contents: write  # allow creating GitHub Releases

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64]
    env:
      POPPLER_VERSION: "24.08.0-0"  # adjust when upstream updates
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: ${{ matrix.arch }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pymupdf pillow

      - name: Build executable (GUI by default)
        run: |
          pyinstaller main.py --name ExtractPDF --onefile --noconsole

      - name: Download Poppler (${{ matrix.arch }})
        shell: pwsh
        run: |
          $arch = "${{ matrix.arch }}"
          $ver = "$env:POPPLER_VERSION"
          $tag = "v$ver"
          $patterns = @()
          if ($arch -eq 'x64') {
            $patterns = @(
              "poppler-$ver-*-x86_64.zip",
              "poppler-*x86_64.zip",
              "*x86_64.zip"
            )
          } else {
            $patterns = @(
              "poppler-$ver-*-x86.zip",
              "poppler-*x86.zip",
              "*i686.zip",
              "*x86.zip"
            )
          }
          $downloaded = $false
          foreach ($p in $patterns) {
            try {
              Write-Host "Trying to download asset '$p' from tag $tag"
              gh release download $tag -R oschwartz10612/poppler-windows -p $p -O poppler.zip
              if (Test-Path poppler.zip) { $downloaded = $true; break }
            } catch {
              Write-Host "Pattern '$p' not found. Trying next..."
            }
          }
          if (-not $downloaded) {
            throw "Failed to download Poppler asset for arch $arch at tag $tag"
          }
          Expand-Archive -Path poppler.zip -DestinationPath poppler -Force
          # Find the bin folder that contains pdftohtml.exe
          $pdftohtml = Get-ChildItem -Path poppler -Recurse -Filter pdftohtml.exe | Select-Object -First 1
          if (-not $pdftohtml) { throw "pdftohtml.exe not found in downloaded Poppler package" }
          $popBin = Split-Path -Parent $pdftohtml.FullName
          New-Item -ItemType Directory -Force -Path bundle/bin | Out-Null
          Copy-Item -Path (Join-Path $popBin '*') -Destination bundle/bin -Recurse -Force

      - name: Create launcher
        shell: pwsh
        run: |
          @"
          @echo off
          setlocal
          set PATH=%~dp0bin;%PATH%
          "%~dp0ExtractPDF.exe" %*
          endlocal
          "@ | Out-File -FilePath bundle\run.cmd -Encoding ascii -Force

      - name: Assemble bundle
        shell: pwsh
        run: |
          Copy-Item -Path dist\ExtractPDF.exe -Destination bundle\ -Force

      - name: Package artifact
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}"
          if ($version.StartsWith("v")) { $version = $version.Substring(1) }
          $zipName = "ExtractPDF-${version}-${{ matrix.arch }}.zip"
          Compress-Archive -Path "bundle/*" -DestinationPath $zipName -Force
          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT
        id: package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.zip_name }}
          path: ${{ steps.package.outputs.zip_name }}
          if-no-files-found: error

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*.zip
          name: Release ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
